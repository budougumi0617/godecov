defaults: &defaults
  working_directory: /go/src/github.com/budougumi0617/godecov/vendor/
  docker:
    - image: circleci/golang:1.11.5
  environment:
    - GOPATH: /go
    - SRC_PATH: /go/src/github.com/budougumi0617/godecov/vendor/
    # For code coverage
    - TEST_RESULTS: /tmp/test-results
    - GO_COVERAGE_OUT: go-coverage.out

branches: &branches
  only:
    - master
    - circleci
    - /pull.*/

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
            - v1-dependencies-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: setup
          command: |
            make setup
      - run:
          name: install dependencies
          command: |
            make dep
      - save_cache:
          paths:
            - /go/src/github.com/budougumi0617/godecov/vendor/
          key: v1-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
      - persist_to_workspace:
          root: /go/
          paths:
            - bin/*
            - src/*
            - pkg/*
            - src/github.com/budougumi0617/godecov/vendor/

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /go/
      - run:
          name: check
          command: |
            make check
  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /go/
      - run:
          name: Install test reporter
          command: |
            go get github.com/jstemmer/go-junit-report
      - run:
          name: Run Tests
          command: |
            cd $SRC_PATH
            mkdir ${TEST_RESULTS}
            trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
            make test GO_TEST_FLAGS="-coverprofile=${GO_COVERAGE_OUT} -covermode=atomic" | tee ${TEST_RESULTS}/go-test.out
            go tool cover -html=${GO_COVERAGE_OUT} -o ${TEST_RESULTS}/go-coverage.html
      - run:
          name: Upload code coverage
          when: on_success
          command: |
            cd $SRC_PATH
            cat ${GO_COVERAGE_OUT} >> coverage.txt
            rm ${GO_COVERAGE_OUT}
            bash <(curl -fs https://codecov.io/bash)
      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  version: 2
  build_test:
    jobs:
      - build:
          filters:
            branches:
              <<: *branches
      - lint:
          requires:
            - build
          filters:
            branches:
              <<: *branches
      - test:
          requires:
            - build
          filters:
            branches:
              <<: *branches
